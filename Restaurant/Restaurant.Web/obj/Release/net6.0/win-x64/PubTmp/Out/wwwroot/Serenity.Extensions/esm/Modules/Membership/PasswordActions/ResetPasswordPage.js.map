{
  "version": 3,
  "sources": ["../../../../../Modules/ServerTypes/Extensions/ResetPasswordForm.ts", "../../../../../Modules/Membership/PasswordActions/ResetPasswordPage.tsx"],
  "sourcesContent": ["\uFEFFimport { PasswordEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\n\nexport interface ResetPasswordForm {\n    NewPassword: PasswordEditor;\n    ConfirmPassword: PasswordEditor;\n}\n\nexport class ResetPasswordForm extends PrefixedContext {\n    static readonly formKey = 'Serenity.Extensions.ResetPasswordRequest';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!ResetPasswordForm.init)  {\n            ResetPasswordForm.init = true;\n\n            var w0 = PasswordEditor;\n\n            initFormType(ResetPasswordForm, [\n                'NewPassword', w0,\n                'ConfirmPassword', w0\n            ]);\n        }\n    }\n}", "/** @jsxImportSource jsx-dom */\nimport { ResetPasswordForm } from \"@/ServerTypes/Extensions/ResetPasswordForm\";\nimport { ResetPasswordRequest } from \"@/ServerTypes/Extensions/ResetPasswordRequest\";\nimport { Texts } from \"@/ServerTypes/Texts\";\nimport { PropertyPanel } from \"@serenity-is/corelib\";\nimport { format, informationDialog, resolveUrl, serviceCall } from \"@serenity-is/corelib\";\nimport { ResetPasswordResponse } from \"../../ServerTypes/Extensions/ResetPasswordResponse\";\nimport { AccountPanelTitle } from \"../AccountPanelTitle\";\n\nexport default function pageInit(opt: ResetPasswordOptions) {\n    new ResetPasswordPanel($('#PanelDiv')\n        .addClass('s-full-page justify-content-center s-Form'), opt);\n}\n\ninterface ResetPasswordOptions {\n    token: string;\n    minPasswordLength: number;\n}\n\nconst myTexts = Texts.Forms.Membership.ResetPassword;\n\nexport class ResetPasswordPanel extends PropertyPanel<ResetPasswordRequest, ResetPasswordOptions> {\n\n    protected getFormKey() { return ResetPasswordForm.formKey; }\n\n    private form = new ResetPasswordForm(this.idPrefix);\n\n    constructor(container: JQuery, opt: ResetPasswordOptions) {\n        super(container, opt);\n\n        this.form.NewPassword.addValidationRule(this.uniqueName, e => {\n            if (this.form.NewPassword.value.length < this.options.minPasswordLength)\n                return format(Texts.Validation.MinRequiredPasswordLength, this.options.minPasswordLength);\n        });\n\n        this.form.ConfirmPassword.addValidationRule(this.uniqueName, e => {\n            if (this.form.ConfirmPassword.value !== this.form.NewPassword.value)\n                return Texts.Validation.PasswordConfirmMismatch;\n        });\n    }\n\n    submitClick() {\n        if (!this.validateForm())\n            return;\n\n        var request = this.getSaveEntity();\n        request.Token = this.byId('Token').val();\n        serviceCall({\n            url: resolveUrl('~/Account/ResetPassword'),\n            request: request,\n            onSuccess: (response: ResetPasswordResponse) => {\n                if (response.RedirectHome)\n                    window.location.href = resolveUrl('~/')\n                else\n                    informationDialog(myTexts.Success, () => {\n                        window.location.href = resolveUrl('~/Account/Login');\n                    });\n            }\n        });\n    }\n\n    renderContents() {\n        const id = this.useIdPrefix();\n        this.element.empty().append(\n            <div class=\"s-container-tight\">\n                <AccountPanelTitle />\n                <div class=\"s-Panel p-4\">\n                    <h5 class=\"text-center mb-4\">{myTexts.FormTitle}</h5>\n                    <form id={id.Form} action=\"\">\n                        <div id={id.PropertyGrid}></div>\n                        <button id={id.SubmitButton} type=\"submit\" class=\"btn btn-primary mx-8 w-100\"\n                            onClick={e => { e.preventDefault(); this.submitClick(); }}>\n                            {myTexts.SubmitButton}\n                        </button>\n                        <input type=\"hidden\" id={id.Token} value={this.options.token} />\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}"],
  "mappings": "0LAAC,IAAAA,EAA8D,SAOxD,IAAMC,EAAN,cAAgC,iBAAgB,CAInD,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAkB,KAAO,CAC1BA,EAAkB,KAAO,GAEzB,IAAIE,EAAK,oBAET,gBAAaF,EAAmB,CAC5B,cAAeE,EACf,kBAAmBA,CACvB,CAAC,CACL,CACJ,CACJ,EAlBaC,EAANH,EAAMI,EAAAD,EAAA,qBAAAA,EACO,QAAU,2CCJ9B,IAAAE,EAA8B,SAC9BA,EAAmE,SAIpD,SAARC,EAA0BC,EAA2B,CACxD,IAAIC,EAAmB,EAAE,WAAW,EAC/B,SAAS,2CAA2C,EAAGD,CAAG,CACnE,CAHwBE,EAAAH,EAAA,YAUxB,IAAMI,EAAUC,EAAM,MAAM,WAAW,cAE1BH,EAAN,cAAiC,eAA0D,CAM9F,YAAYI,EAAmBL,EAA2B,CACtD,MAAMK,EAAWL,CAAG,EAHxB,KAAQ,KAAO,IAAIM,EAAkB,KAAK,QAAQ,EAK9C,KAAK,KAAK,YAAY,kBAAkB,KAAK,WAAYC,GAAK,CAC1D,GAAI,KAAK,KAAK,YAAY,MAAM,OAAS,KAAK,QAAQ,kBAClD,SAAO,UAAOH,EAAM,WAAW,0BAA2B,KAAK,QAAQ,iBAAiB,CAChG,CAAC,EAED,KAAK,KAAK,gBAAgB,kBAAkB,KAAK,WAAYG,GAAK,CAC9D,GAAI,KAAK,KAAK,gBAAgB,QAAU,KAAK,KAAK,YAAY,MAC1D,OAAOH,EAAM,WAAW,uBAChC,CAAC,CACL,CAhBU,YAAa,CAAE,OAAOE,EAAkB,OAAS,CAkB3D,aAAc,CACV,GAAK,KAAK,aAAa,EAGvB,KAAIE,EAAU,KAAK,cAAc,EACjCA,EAAQ,MAAQ,KAAK,KAAK,OAAO,EAAE,IAAI,KACvC,eAAY,CACR,OAAK,cAAW,yBAAyB,EACzC,QAASA,EACT,UAAYC,GAAoC,CACxCA,EAAS,aACT,OAAO,SAAS,QAAO,cAAW,IAAI,KAEtC,qBAAkBN,EAAQ,QAAS,IAAM,CACrC,OAAO,SAAS,QAAO,cAAW,iBAAiB,CACvD,CAAC,CACT,CACJ,CAAC,EACL,CAEA,gBAAiB,CACb,IAAMO,EAAK,KAAK,YAAY,EAC5B,KAAK,QAAQ,MAAM,EAAE,OACjBC,EAAC,OAAI,MAAM,oBACP,UAAAA,EAACC,EAAA,EAAkB,EACnBD,EAAC,OAAI,MAAM,cACP,UAAAA,EAAC,MAAG,MAAM,mBAAoB,SAAAR,EAAQ,UAAU,EAChDQ,EAAC,QAAK,GAAID,EAAG,KAAM,OAAO,GACtB,UAAAC,EAAC,OAAI,GAAID,EAAG,aAAc,EAC1BC,EAAC,UAAO,GAAID,EAAG,aAAc,KAAK,SAAS,MAAM,6BAC7C,QAASH,GAAK,CAAEA,EAAE,eAAe,EAAG,KAAK,YAAY,CAAG,EACvD,SAAAJ,EAAQ,aACb,EACAQ,EAAC,SAAM,KAAK,SAAS,GAAID,EAAG,MAAO,MAAO,KAAK,QAAQ,MAAO,GAClE,GACJ,GACJ,CACJ,CACJ,CACJ,EA3DaR,EAAAD,EAAA",
  "names": ["import_corelib", "_ResetPasswordForm", "prefix", "w0", "ResetPasswordForm", "__name", "import_corelib", "pageInit", "opt", "ResetPasswordPanel", "__name", "myTexts", "Texts", "container", "ResetPasswordForm", "e", "request", "response", "id", "jsx", "AccountPanelTitle"]
}
